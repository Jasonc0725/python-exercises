1. 回想看看到目前為止，你曾經遇到過哪些錯誤發生？

(在這裡回答)語法錯誤（SyntaxError）：這種錯誤發生在程式碼中，通常是拼寫錯誤、括號未匹配、冒號未正確使用等等。

名稱錯誤（NameError）：這種錯誤通常發生在使用未定義變數或函數時。
類型錯誤（TypeError）：這種錯誤通常發生在使用不適當的資料類型時，例如嘗試使用整數與字串進行運算。
索引錯誤（IndexError）：這種錯誤發生在嘗試使用不存在的列表索引或字串索引時。

2. 試著解釋什麼是「例外處理」，並且說明在哪些情況適合使用？

(在這裡回答)在Python編程中，當程式運行出現錯誤時，會產生一種稱為「例外(exception)」的事件，例外處理以處理預期和非預期的異常狀況。
當異常發生時，程式可以通過例外處理的機制進行處理，而不是直接崩潰或停止執行。在適當地處理異常時，可以幫助程式更加穩定、可靠，並且提高程式的容錯能力

輸入錯誤：當輸入的值不在合理範圍內時，可以捕捉這個異常，提醒使用者重新輸入。

- 不存在的檔案：當指定的檔案不存在時，可以使用 try...except 捕捉異常，提醒使用者輸入正確的檔名或路徑。

- 網路連線出錯：當程式連線網路時，如果出現異常，可以捕捉這個異常，針對異常情況進行處理。

3. 請問以下程式碼的「變數 e」代表的意義是什麼？

try:
x = input() / input()
except Exception as e:
print(e)
(在這裡回答)變數 e 是一個 Exception 物件，表示異常的詳細訊息。

except Exception as e: 句法表示將發生的異常儲存在 e 變數中，方便後續使用。



4. 請問以下程式碼的「raise」跟「finally」的用法為何？

try:
raise Exception('spam', 'eggs')
except Exception as e:
print(e)
finally:
print('done')

(在這裡回答)raise可以用來引發自定義的例外

程式碼中的 raise 用於引發例外，在這裡使用的是 Exception 異常。在
except Exception as e: 語句之後，我們用 print(e) 輸出 Exception 異常的詳細訊息。

finally代表 try...except 塊總會執行的程式碼。在這個例子中，不管 try 塊執行成功與否，
finally 均會被執行，用於清理等操作。在 finally 中的程式碼不論 try 塊中是否有異常，都會被執行。
